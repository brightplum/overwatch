<?php

/**
 * @file
 * Primary module hooks for Overwatch Dropdown module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_cron().
 */
function overwatch_bp_dropdown_cron() {
  // Get the current request object.
  $clientSwitcher = \Drupal::service('overwatch_bp_dropdown.client_switcher');
  $options = $clientSwitcher->getOptions();

  // Get options in cache.
  $cache_key = 'overwatch_bp_cached_options';
  $cache = \Drupal::cache()->get($cache_key);

  if (!$cache) {
    \Drupal::cache()->set($cache_key, $options, Cache::PERMANENT, ['overwatchbp']);
    return;
  }

  $options_in_cache = $cache->data;
  // Find values in $options that are not in $options_in_cache
  $new_options = array_diff($options, $options_in_cache);

  if (!empty($new_options)) {
    \Drupal::cache()->set($cache_key, $options, Cache::PERMANENT, ['overwatchbp']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for overwatch_bp_dropdown_form.
 */
function overwatch_bp_dropdown_form_overwatch_bp_dropdown_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $query = \Drupal::request()->query;

  // Get the client_site parameter from the URL.
  $client_site = $query->get('client_site');

  if (!$client_site) {
    // Load options (cached or updated) for the dropdown.
    $options = \Drupal::service('overwatch_bp_dropdown.client_switcher')->getOptions();

    if (!empty($options)) {
      // Get the first key from the options array.
      $default_client_site = array_key_first($options);

      // Get the existing query parameters.
      $query_params = $query->all();

      // Add or overwrite the 'client_site' query parameter.
      $query_params['client_site'] = $default_client_site;

      // Build the URL with the 'client_site' query parameter.
      $url = Url::fromRoute('<current>', $query_params);

      // Get the path from the URL.
      $path = $url->toString();

      // Create a RedirectResponse to initiate the redirect.
      $response = new RedirectResponse($path);

      // Return the response to perform the redirect.
      $response->send();
    }
  }
}