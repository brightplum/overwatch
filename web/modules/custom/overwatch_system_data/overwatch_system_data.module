<?php

/**
 * @file
 * Primary module hooks for Overwatch System Data module.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_theme().
 */
function overwatch_system_data_theme($existing, $type, $theme, $path) {
  return [
    'system_data_dashboard' => [
      'variables' => [
        'data' => NULL,
      ],
      'template'  => 'system-data-dashboard',
    ],
    'system_data_summary' => [
      'variables' => [
        'data' => NULL
      ],
      'template' => 'system-data-summary',
    ],
    'node__systemdata__custom' => [
      'variables' => [
        'data' => NULL
      ],
      'template' => 'node--systemdata--custom',
    ],
  ];
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function overwatch_system_data_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];

  // Check if we are in the specific view and field.
  if ($view->id() === 'system_data_technical' && $field->field_alias === 'site_type') {
    // Clean the field content from HTML tags and whitespace.
    $field_content = trim(strip_tags($variables['output']));

    // Build FontAwesome class based on the field content.
    if (in_array($field_content, ['Drupal', 'WordPress'])) {
      // Convert the content to a lowercase string for FontAwesome class.
      $icon_class = strtolower($field_content);
      $variables['output'] = Markup::create('<i class="fab fa-' . $icon_class . ' fa-2x"></i>');
    }
    else {
      $variables['output'] = Markup::create('<i class="fas fa-info-circle fa-2x"></i>');
    }
  }
  elseif ($view->id() === 'system_data_technical' && $field->field_alias === 'last_cron_run_time') {
    $date_string = $variables['output'];
    $date = new DrupalDateTime($date_string);
    $formatted_date = $date->format('d/m/Y H:i');
    $variables['output'] = $formatted_date;
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function overwatch_system_data_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $node = $variables['elements']['#node'];

  if ($node->getType() === 'systemdata') {
    $suggestions[] = 'node__' . $node->getType() . '__custom';
  }
}

/**
 * Implements hook_entity_view().
 */
function overwatch_system_data_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'systemdata') {
    $build['#attached']['library'][] = 'overwatch_system_data/overwatch-system-data';
  }
}
