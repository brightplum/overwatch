<?php

/**
 * @file
 * Functions to support theming in the Overwatch BP theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function overwatch_bp_preprocess_html(&$variables) {
  if (empty($variables['page']['#title'])) {
    return;
  }

  if ($variables['page']['#title'] instanceof \Drupal\Core\StringTranslation\TranslatableMarkup) {
    $title = \Drupal\Component\Utility\Html::getClass($variables['page']['#title']->render());
    $variables['attributes']['class'][] = "page-{$title}";
  }
  else if ($variables['page']['#title'] instanceof \Drupal\Core\Render\Markup) {
    $title = \Drupal\Component\Utility\Html::getClass(\Drupal\Component\Render\PlainTextOutput::renderFromHtml($variables['page']['#title']));
    $variables['attributes']['class'][] = "page-{$title}";
  }

}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function overwatch_bp_preprocess_page(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function overwatch_bp_preprocess_node(&$variables) {

}

/**
 * Implements hook_preprocess_block.
 */
function overwatch_bp_preprocess_block(&$vars) {
  if (empty($vars['elements']['#id'])) {
    return;
  }

  // Add block bundle as class to blocks.
  if (!empty($vars['content']['#block_content']) and $vars['content']['#block_content'] instanceof BlockContentInterface) {
    $vars['attributes']['class'][] = 'overwatch-bp-block-bundle-' . $vars['content']['#block_content']->bundle();
  }

  $block_id = str_replace('_', '-', $vars['elements']['#id']);
  $vars['attributes']['class'][] = 'overwatch-bp-block-' . $block_id;

  if ($vars['elements']['#id'] === 'overwatch_bp_page_title') {
    $vars['attributes']['class'][] = 'page-title';
  }
}

/**
 * Implements hook_preprocess_menu.
 */
function overwatch_bp_preprocess_menu(&$variables) {
  if (empty($variables['items'])) {
    return;
  }

  if ($variables['menu_name'] === 'main') {
    $variables['attributes']['class'][] = 'menu-main__content';

    // Get the current path.
    $current_path = \Drupal::service('path.current')->getPath();

    // Loop through the menu items.
    foreach ($variables['items'] as $key => $item) {
      // Compare the menu item path with the current path.
      if ($item['url']->toString() === $current_path) {
        // If they match, add the menu item to the matching_items array.
        $variables['matching_item'] = $item['title'];

        // Break the loop when a matching item is found.
        break;
      }
    }
  }
}


